<?php

/**
 * Copyright 2014 Fabian Grutschus. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met =>
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * The views and conclusions contained in the software and documentation are those
 * of the authors and should not be interpreted as representing official policies,
 * either expressed or implied, of the copyright holders.
 *
 * @author    Fabian Grutschus <f.grutschus@lubyte.de>
 * @copyright 2014 Fabian Grutschus. All rights reserved.
 * @license   BSD-2-Clause
 * @link      http =>//github.com/purr-php/purr
 */

namespace Fabiang\Cludearg;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-06-20 at 16:18:14.
 */
class LoaderTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var Loader
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Loader;
    }

    /**
     * @covers Fabiang\Cludearg\Loader::load
     * @uses Fabiang\Cludearg\Definition
     * @uses Fabiang\Cludearg\Definition\AbstractInExclude
     * @uses Fabiang\Cludearg\Definition\Application
     * @uses Fabiang\Cludearg\Definition\Version
     * @uses Fabiang\Cludearg\Definition\AbstractArgumentDefinition
     */
    public function testLoad()
    {
        $result = $this->object->load(array(
            'php/lint' => array(
                '0.*'     => array(
                    'exclude' => array(
                        'combined' => true,
                        'path'     => array(
                            'parameter' => '--ignore=%s',
                            'separator' => ',',
                            'wildcard'  => true,
                            'regex'     => true,
                            'multiple'  => true,
                            'relative'  => true
                        ),
                        'file'     => array(
                            'parameter' => '--ignore=%s',
                            'separator' => ',',
                            'wildcard'  => true,
                            'regex'     => true,
                            'multiple'  => true,
                            'relative'  => false
                        )
                    ),
                    'include' => array(
                        'combined' => false,
                        'path'     => array(
                            'parameter' => '%s',
                            'separator' => null,
                            'wildcard'  => true,
                            'regex'     => true,
                            'multiple'  => true,
                            'relative'  => true
                        ),
                        'file'     => array(
                            'parameter' => '%s',
                            'separator' => null,
                            'wildcard'  => true,
                            'regex'     => true,
                            'multiple'  => true,
                            'relative'  => true
                        )
                    ),
                ),
                '1.*,2.*' => array(
                ),
            )
        ));

        $this->assertInstanceOf('\\Fabiang\\Cludearg\\Definition', $result);
        $this->assertCount(1, $result->getApplications());
        $application = $result->getApplication('php/lint');
        $this->assertCount(3, $application->getVersions());
        $this->assertSame('php/lint', $application->getName());
        $version = $application->getVersions();
        $version1 = $version[0];
        $version2 = $version[1];
        $version3 = $version[2];
        $this->assertSame('0.*', $version1->getVersion());
        $this->assertSame('1.*', $version2->getVersion());
        $this->assertSame('2.*', $version3->getVersion());

        $include = $version1->getInclude();
        $exclude = $version1->getExclude();
        $this->assertInstanceOf('\Fabiang\Cludearg\Definition\IncludeDefinition', $include);
        $this->assertInstanceOf('\Fabiang\Cludearg\Definition\ExcludeDefinition', $exclude);

        $this->assertFalse($include->isCombined());
        $this->assertTrue($exclude->isCombined());

        $file = $include->getFile();
        $this->assertSame('%s', $file->getParameter());
        $this->assertNull($file->getSeparator());
        $this->assertTrue($file->isMultiple());
        $this->assertTrue($file->isRegex());
        $this->assertTrue($file->isRelative());
        $this->assertTrue($file->isWildcard());

        $path = $include->getPath();
        $this->assertSame('%s', $path->getParameter());
        $this->assertNull($path->getSeparator());
        $this->assertTrue($path->isMultiple());
        $this->assertTrue($path->isRegex());
        $this->assertTrue($path->isRelative());
        $this->assertTrue($path->isWildcard());

        $file = $exclude->getFile();
        $this->assertSame('--ignore=%s', $file->getParameter());
        $this->assertSame(',', $file->getSeparator());
        $this->assertTrue($file->isMultiple());
        $this->assertTrue($file->isRegex());
        $this->assertFalse($file->isRelative());
        $this->assertTrue($file->isWildcard());

        $path = $exclude->getPath();
        $this->assertSame('--ignore=%s', $path->getParameter());
        $this->assertSame(',', $path->getSeparator());
        $this->assertTrue($path->isMultiple());
        $this->assertTrue($path->isRegex());
        $this->assertTrue($path->isRelative());
        $this->assertTrue($path->isWildcard());
    }

    /**
     * @covers Fabiang\Cludearg\Loader::loadJSON
     * @uses Fabiang\Cludearg\Loader::load
     * @uses Fabiang\Cludearg\Definition
     * @uses Fabiang\Cludearg\Definition\AbstractInExclude
     * @uses Fabiang\Cludearg\Definition\Application
     * @uses Fabiang\Cludearg\Definition\Version
     * @uses Fabiang\Cludearg\Definition\AbstractArgumentDefinition
     */
    public function testLoadJSON()
    {
        $this->assertInstanceOf(
            '\\Fabiang\\Cludearg\\Definition',
            $this->object->loadJSON(__DIR__ . '/../../definition.json')
        );
    }

    /**
     * @covers Fabiang\Cludearg\Loader::loadJSON
     * @expectedException \RuntimeException
     */
    public function testLoadJSONFileNotReadable()
    {
        $this->object->loadJSON(__DIR__ . '/unknown.json');
    }
}
