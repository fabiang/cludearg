<?php

/**
 * Copyright 2014 Fabian Grutschus. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * The views and conclusions contained in the software and documentation are those
 * of the authors and should not be interpreted as representing official policies,
 * either expressed or implied, of the copyright holders.
 *
 * @author    Fabian Grutschus <f.grutschus@lubyte.de>
 * @copyright 2014 Fabian Grutschus. All rights reserved.
 * @license   BSD-2-Clause
 * @link      http://github.com/purr-php/purr
 */

namespace Fabiang\Cludearg\Definition;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-06-20 at 15:12:05.
 */
class ExcludeDefinitionTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var ExcludeDefinition
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new ExcludeDefinition;
    }

    /**
     * @covers Fabiang\Cludearg\Definition\ExcludeDefinition::getFile
     * @covers Fabiang\Cludearg\Definition\ExcludeDefinition::setFile
     */
    public function testSetAndGetFile()
    {
        $file = $this->getMock(__NAMESPACE__ . '\\ArgumentDefinitionInterface');
        $this->assertSame($file, $this->object->setFile($file)->getFile());
    }

    /**
     * @covers Fabiang\Cludearg\Definition\ExcludeDefinition::getPath
     * @covers Fabiang\Cludearg\Definition\ExcludeDefinition::setPath
     */
    public function testSetAndGetPath()
    {
        $path = $this->getMock(__NAMESPACE__ . '\\ArgumentDefinitionInterface');
        $this->assertSame($path, $this->object->setPath($path)->getPath());
    }

    /**
     * @covers Fabiang\Cludearg\Definition\ExcludeDefinition::isCombined
     * @covers Fabiang\Cludearg\Definition\ExcludeDefinition::setCombined
     */
    public function testSetAndIsCombined()
    {
        $this->assertTrue($this->object->setCombined(1)->isCombined());
    }

    /**
     * @covers Fabiang\Cludearg\Definition\ExcludeDefinition::isOnlyOne
     * @covers Fabiang\Cludearg\Definition\ExcludeDefinition::setOnlyOne
     */
    public function testSetAndIsOnlyOne()
    {
        $this->assertTrue($this->object->setOnlyOne(1)->isOnlyOne());
    }

    /**
     * @covers Fabiang\Cludearg\Definition\ExcludeDefinition::setOptions
     * @uses Fabiang\Cludearg\Definition\AbstractInExclude
     * @uses Fabiang\Cludearg\Definition\AbstractArgumentDefinition
     */
    public function testSetOptions()
    {
        $this->object->setOptions(array(
            'combined' => true,
            'onlyOne'  => true,
            'path'     => array(
                'parameter' => '--ignore=%s',
                'separator' => ',',
                'wildcard'  => true,
                'regex'     => true,
                'multiple'  => true,
                'relative'  => true
            ),
            'file'     => array(
                'parameter' => '--ignore=%s',
                'separator' => ',',
                'wildcard'  => true,
                'regex'     => true,
                'multiple'  => true,
                'relative'  => false
            )
        ));

        $file = $this->object->getFile();
        $this->assertSame('--ignore=%s', $file->getParameter());
        $this->assertSame(',', $file->getSeparator());
        $this->assertTrue($file->isMultiple());
        $this->assertTrue($file->isRegex());
        $this->assertFalse($file->isRelative());
        $this->assertTrue($file->isWildcard());

        $path = $this->object->getPath();
        $this->assertSame('--ignore=%s', $path->getParameter());
        $this->assertSame(',', $path->getSeparator());
        $this->assertTrue($path->isMultiple());
        $this->assertTrue($path->isRegex());
        $this->assertTrue($path->isRelative());
        $this->assertTrue($path->isWildcard());
    }
}
